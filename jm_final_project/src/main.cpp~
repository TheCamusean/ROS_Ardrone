#include <ros/ros.h>
#include <math.h>
#include "ar_pose/ARMarker.h"
#include "std_msgs/String.h"
#include "std_msgs/Empty.h"
#include "std_msgs/Float64.h"
#include "geometry_msgs/Twist.h"
#include <tf/transform_listener.h>
float toggle=0;
float giro=0;
void tog(const std_msgs::String::ConstPtr& msg)
{
  if(toggle<0.5){
  toggle = 1;}
  else if(toggle>0.5){
  toggle=0;}
  ROS_INFO("toggle=%f",toggle);
}

void arCallback(const ar_pose::ARMarker & msg)
{
if (giro==1){giro=0;}

}







int main(int argc, char **argv)
{
  ros::init(argc, argv, "main");
  ros::NodeHandle n;
  ros::Rate loop_rate(30);


 ros::Subscriber sub = n.subscribe("ar_pose_marker", 1, arCallback);
 
  giro_pub = n.advertise<geometry_msgs::Twist>("/cmd_vel", 1);

ros::ServiceClient togglecameramain=n.serviceClient <std_srvs::Empty>("/ardrone/togglecam");
std_srvs::Empty togglecameramain_srv;

 ros::Publisher toggle_pub = n.advertise<std_msgs::Float32>("/toggledetect", 100);
  // el toggle
  ros::Subscriber subs_tog = n.subscribe("toggledetect", 1, tog);

  while(ros::ok()){
	if(toggle==1)
	{
	ros::Duration(5).sleep();
	togglecamera.call(togglecamera_srv);

	msg4.data="Change of camera";
     	toggle_pub.publish(msg4);
	giro=1;
	}
//toggle==0 contador antes de landing
	if (giro==1){
	geometry_msgs::Twist giromsg;
	
	giromsg.angular.z=0.2;
	
	giro_pub.publish(giromsg);
	 ros::spinOnce();
    	loop_rate.sleep();
   }	
  }
